import React from "react";
import styles from "./HistoryEntryItem.module.css";
import type { HistoryEntry } from "../../types";
import Trash from "../../assets/icons/Trash.svg";
import File from "../../assets/icons/File.svg";

interface HistoryEntryItemProps {
  entry: HistoryEntry;
  onSelect: (entry: HistoryEntry) => void;
  onDelete: (id: string) => void;
}

const SmileIcon = ({ color }: { color: string }) => (
  <svg
    width="24"
    height="24"
    viewBox="0 0 34 33"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    className={styles.statusIcon}
    style={{ color }}
  >
    <path
      d="M17 0.25C13.7861 0.25 10.6443 1.20305 7.97199 2.98862C5.29969 4.77419 3.21689 7.31209 1.98696 10.2814C0.757041 13.2507 0.435237 16.518 1.06225 19.6702C1.68926 22.8224 3.23692 25.7179 5.50952 27.9905C7.78213 30.2631 10.6776 31.8107 13.8298 32.4378C16.982 33.0648 20.2493 32.743 23.2186 31.513C26.1879 30.2831 28.7258 28.2003 30.5114 25.528C32.297 22.8557 33.25 19.7139 33.25 16.5C33.2455 12.1916 31.5319 8.06102 28.4855 5.01454C25.439 1.96806 21.3084 0.25455 17 0.25ZM17 30.25C14.2805 30.25 11.6221 29.4436 9.36092 27.9327C7.09974 26.4218 5.33737 24.2744 4.29666 21.7619C3.25596 19.2494 2.98366 16.4847 3.51421 13.8175C4.04476 11.1503 5.35432 8.70025 7.27729 6.77728C9.20026 4.85431 11.6503 3.54475 14.3175 3.0142C16.9848 2.48366 19.7494 2.75595 22.2619 3.79666C24.7744 4.83736 26.9218 6.59973 28.4327 8.86091C29.9436 11.1221 30.75 13.7805 30.75 16.5C30.7459 20.1455 29.2959 23.6404 26.7182 26.2182C24.1404 28.7959 20.6455 30.2459 17 30.25ZM9.50001 13.375C9.50001 13.0042 9.60997 12.6416 9.816 12.3333C10.022 12.025 10.3149 11.7846 10.6575 11.6427C11.0001 11.5008 11.3771 11.4637 11.7408 11.536C12.1045 11.6084 12.4386 11.787 12.7008 12.0492C12.9631 12.3114 13.1416 12.6455 13.214 13.0092C13.2863 13.3729 13.2492 13.7499 13.1073 14.0925C12.9654 14.4351 12.725 14.728 12.4167 14.934C12.1084 15.14 11.7458 15.25 11.375 15.25C10.8777 15.25 10.4008 15.0525 10.0492 14.7008C9.69755 14.3492 9.50001 13.8723 9.50001 13.375ZM24.5 13.375C24.5 13.7458 24.39 14.1084 24.184 14.4167C23.978 14.725 23.6851 14.9654 23.3425 15.1073C22.9999 15.2492 22.6229 15.2863 22.2592 15.214C21.8955 15.1416 21.5614 14.963 21.2992 14.7008C21.037 14.4386 20.8584 14.1045 20.786 13.7408C20.7137 13.3771 20.7508 13.0001 20.8927 12.6575C21.0346 12.3149 21.275 12.022 21.5833 11.816C21.8917 11.61 22.2542 11.5 22.625 11.5C23.1223 11.5 23.5992 11.6975 23.9508 12.0492C24.3025 12.4008 24.5 12.8777 24.5 13.375ZM24.3313 23.375C24.4217 23.5173 24.4824 23.6764 24.5098 23.8427C24.5372 24.0091 24.5306 24.1792 24.4905 24.343C24.4504 24.5067 24.3775 24.6607 24.2764 24.7955C24.1753 24.9304 24.0479 25.0434 23.9019 25.1278C23.756 25.2122 23.5944 25.2661 23.4271 25.2865C23.2597 25.3068 23.09 25.2931 22.9281 25.2461C22.7662 25.1991 22.6154 25.1199 22.4849 25.0131C22.3545 24.9064 22.2469 24.7744 22.1688 24.625C21.0016 22.6078 19.1672 21.5 17 21.5C14.8328 21.5 12.9984 22.6094 11.8313 24.625C11.7531 24.7744 11.6456 24.9064 11.5151 25.0131C11.3846 25.1199 11.2338 25.1991 11.0719 25.2461C10.91 25.2931 10.7403 25.3068 10.5729 25.2865C10.4056 25.2661 10.2441 25.2122 10.0981 25.1278C9.95214 25.0434 9.82476 24.9304 9.72361 24.7955C9.62247 24.6607 9.54965 24.5067 9.50954 24.343C9.46944 24.1792 9.46286 24.0091 9.49022 23.8427C9.51759 23.6764 9.57831 23.5173 9.66876 23.375C11.2766 20.5953 13.9484 19 17 19C20.0516 19 22.7234 20.5938 24.3313 23.375Z"
      fill="currentColor"
    />
  </svg>
);

const SadIcon = ({ color }: { color: string }) => (
  <svg
    width="24"
    height="24"
    viewBox="0 0 40 41"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    className={styles.statusIcon}
    style={{ color }}
  >
    <path
      d="M20 4.25C16.7861 4.25 13.6443 5.20305 10.972 6.98862C8.29969 8.77419 6.21689 11.3121 4.98696 14.2814C3.75704 17.2507 3.43524 20.518 4.06225 23.6702C4.68926 26.8224 6.23692 29.7179 8.50952 31.9905C10.7821 34.2631 13.6776 35.8107 16.8298 36.4378C19.982 37.0648 23.2493 36.743 26.2186 35.513C29.1879 34.2831 31.7258 32.2003 33.5114 29.528C35.297 26.8557 36.25 23.7139 36.25 20.5C36.2455 16.1916 34.5319 12.061 31.4855 9.01454C28.439 5.96806 24.3084 4.25455 20 4.25ZM20 34.25C17.2805 34.25 14.6221 33.4436 12.3609 31.9327C10.0997 30.4218 8.33737 28.2744 7.29666 25.7619C6.25596 23.2494 5.98366 20.4847 6.51421 17.8175C7.04476 15.1503 8.35432 12.7003 10.2773 10.7773C12.2003 8.85431 14.6503 7.54475 17.3175 7.0142C19.9848 6.48366 22.7494 6.75595 25.2619 7.79666C27.7744 8.83736 29.9218 10.5997 31.4327 12.8609C32.9436 15.1221 33.75 17.7805 33.75 20.5C33.7459 24.1455 32.2959 27.6404 29.7182 30.2182C27.1404 32.7959 23.6455 34.2459 20 34.25ZM12.5 17.375C12.5 17.0042 12.61 16.6416 12.816 16.3333C13.022 16.025 13.3149 15.7846 13.6575 15.6427C14.0001 15.5008 14.3771 15.4637 14.7408 15.536C15.1045 15.6084 15.4386 15.787 15.7008 16.0492C15.9631 16.3114 16.1416 16.6455 16.214 17.0092C16.2863 17.3729 16.2492 17.7499 16.1073 18.0925C15.9654 18.4351 15.725 18.728 15.4167 18.934C15.1084 19.14 14.7458 19.25 14.375 19.25C13.8777 19.25 13.4008 19.0525 13.0492 18.7008C12.6976 18.3492 12.5 17.8723 12.5 17.375ZM27.5 17.375C27.5 17.7458 27.39 18.1084 27.184 18.4167C26.978 18.725 26.6851 18.9654 26.3425 19.1073C25.9999 19.2492 25.6229 19.2863 25.2592 19.214C24.8955 19.1416 24.5614 18.963 24.2992 18.7008C24.037 18.4386 23.8584 18.1045 23.786 17.7408C23.7137 17.3771 23.7508 17.0001 23.8927 16.6575C24.0346 16.3149 24.275 16.022 24.5833 15.816C24.8917 15.61 25.2542 15.5 25.625 15.5C26.1223 15.5 26.5992 15.6975 26.9508 16.0492C27.3025 16.4008 27.5 16.8777 27.5 17.375ZM27.3313 27.375C27.4217 27.5173 27.4824 27.6764 27.5098 27.8427C27.5372 28.0091 27.5306 28.1792 27.4905 28.343C27.4504 28.5067 27.3775 28.6607 27.2764 28.7955C27.1753 28.9304 27.0479 29.0434 26.9019 29.1278C26.756 29.2122 26.5944 29.2661 26.4271 29.2865C26.2597 29.3068 26.09 29.2931 25.9281 29.2461C25.7662 29.1991 25.6154 29.1199 25.4849 29.0131C25.3545 28.9064 25.2469 28.7744 25.1688 28.625C24.0016 26.6078 22.1672 25.5 20 25.5C17.8328 25.5 15.9984 26.6094 14.8313 28.625C14.7531 28.7744 14.6456 28.9064 14.5151 29.0131C14.3846 29.1199 14.2338 29.1991 14.0719 29.2461C13.91 29.2931 13.7403 29.3068 13.5729 29.2865C13.4056 29.2661 13.2441 29.2122 13.0981 29.1278C12.9521 29.0434 12.8248 28.9304 12.7236 28.7955C12.6225 28.6607 12.5497 28.5067 12.5095 28.343C12.4694 28.1792 12.4629 28.0091 12.4902 27.8427C12.5176 27.6764 12.5783 27.5173 12.6688 27.375C14.2766 24.5953 16.9484 23 20 23C23.0516 23 25.7234 24.5938 27.3313 27.375Z"
      fill="currentColor"
    />
  </svg>
);

export const HistoryEntryItem: React.FC<HistoryEntryItemProps> = ({
  entry,
  onSelect,
  onDelete,
}) => {
  const isSuccess = !!entry.result;

  const successColor = isSuccess ? "#201B10" : "#8F64AE";
  const errorColor = isSuccess ? "#8F64AE" : "#201B10";

  const fileInfoColor = "#201B10";

  return (
    <li className={styles.entryContainer}>
      <div
        className={styles.entryBlock}
        onClick={() => isSuccess && onSelect(entry)}
      >
        <div className={styles.fileInfo}>
          <img src={File} alt="Файл" className={styles.fileIcon} />
          <span className={styles.fileName} style={{ color: fileInfoColor }}>
            {entry.fileName}
          </span>
          <span className={styles.date} style={{ color: fileInfoColor }}>
            {formatDate(entry.uploadDate)}
          </span>
        </div>
        <div className={styles.statusContainer}>
          <span
            className={styles.statusSuccess}
            style={{ color: successColor }}
          >
            Обработан успешно
            <SmileIcon color={successColor} />
          </span>
          <span className={styles.statusError} style={{ color: errorColor }}>
            Не удалось обработать
            <SadIcon color={errorColor} />
          </span>
        </div>
      </div>
      <button
        className={styles.deleteButton}
        onClick={() => onDelete(entry.id)}
        aria-label="Удалить запись"
      >
        <img src={Trash} alt="Удалить" className={styles.trashIcon} />
      </button>
    </li>
  );
};

function formatDate(dateString: string) {
  const date = new Date(dateString);
  const day = String(date.getDate()).padStart(2, "0");
  const month = String(date.getMonth() + 1).padStart(2, "0");
  const year = String(date.getFullYear()).slice(2);
  return `${day}.${month}.${year}`;
}
